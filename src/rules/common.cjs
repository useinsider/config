/** @type {import("eslint").Linter.Config} */
module.exports = {
    rules: {
        '@cspell/spellchecker': ['error', {
            customWordListFile: '../../cspell.json',
        }],
        'array-bracket-spacing': ['error', 'never'],
        'array-element-newline': ['error', 'consistent'],
        'arrow-parens': ['error', 'as-needed'],
        'arrow-spacing': ['error'],
        'brace-style': ['error', '1tbs'],
        camelcase: ['error', { allow: ['^\\$_'] }],
        'class-methods-use-this': 'off',
        'comma-dangle': ['error', {
            arrays: 'always-multiline',
            exports: 'always-multiline',
            functions: 'never',
            imports: 'always-multiline',
            objects: 'always-multiline',
        }],
        'comma-spacing': ['error'],
        'consistent-return': ['error'],
        curly: ['error', 'all'],
        'dot-notation': ['error'],
        'function-paren-newline': ['error', 'consistent'],
        'guard-for-in': 'error',
        'handle-callback-err': ['error'],
        'import/extensions': ['error', {
            js: 'never',
            ts: 'never',
            tsx: 'never',
            vue: 'always',
            css: 'always',
            scss: 'always',
            svg: 'always',
            json: 'always',
        }],
        'import/no-cycle': 'off',
        'import/no-unresolved': 'off',
        'import/order': ['error', {
            alphabetize: {
                caseInsensitive: true,
                order: 'asc',
            },
            groups: ['index', 'builtin', 'object', 'type', 'external', 'parent', 'internal', 'sibling'],
            pathGroups: [{
                group: 'internal',
                pattern: '@/**',
            }],
        }],
        indent: ['error', 4, {
            SwitchCase: 1,
        }],
        'key-spacing': ['error'],
        'keyword-spacing': ['error'],
        'lines-between-class-members': ['error', 'always', {
            exceptAfterSingleLine: true,
        }],
        'max-len': ['error', 120, {
            ignoreComments: true,
            ignoreRegExpLiterals: true,
            ignoreTemplateLiterals: true,
            ignoreTrailingComments: true,
            ignoreUrls: true,
            ignorePattern: '^import .*?.svg.*',
        }],
        'new-cap': ['error'],
        'no-alert': ['error'],
        'no-bitwise': ['error', {
            allow: ['~'],
        }],
        'no-caller': ['error'],
        'no-case-declarations': ['error'],
        'no-confusing-arrow': ['error', {
            allowParens: true,
        }],
        'no-console': ['error'],
        'no-debugger': ['error'],
        'no-div-regex': ['error'],
        'no-dupe-args': ['error'],
        'no-dupe-keys': ['error'],
        'no-duplicate-case': ['error'],
        'no-else-return': ['error'],
        'no-empty': ['error'],
        'no-extra-bind': ['error'],
        'no-extra-boolean-cast': 'error',
        'no-extra-parens': ['error', 'all', {
            enforceForArrowConditionals: false,
            nestedBinaryExpressions: false,
            returnAssign: false,
        }],
        'no-extra-semi': ['error'],
        'no-fallthrough': ['error'],
        'no-implicit-coercion': ['error', {
            boolean: true,
            number: true,
            string: true,
        }],
        'no-invalid-regexp': ['error'],
        'no-iterator': ['error'],
        'no-mixed-operators': ['error', {
            allowSamePrecedence: true,
            groups: [
                ['&', '|', '^', '~', '<<', '>>', '>>>'],
                ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
                ['&&', '||'],
                ['in', 'instanceof'],
            ],
        }],
        'no-mixed-spaces-and-tabs': ['error'],
        'no-multi-spaces': ['error'],
        'no-multi-str': ['error'],
        'no-native-reassign': 'error',
        'no-nested-ternary': ['error'],
        'no-new': 'off',
        'no-new-object': ['error'],
        'no-new-require': ['error'],
        'no-param-reassign': ['error', {
            props: false,
        }],
        'no-plusplus': 'off',
        'no-process-exit': ['error'],
        'no-return-assign': ['error', 'except-parens'],
        'no-self-compare': ['error'],
        'no-sequences': ['error'],
        'no-shadow': ['error', {
            allow: ['state'],
        }],
        'no-trailing-spaces': ['error'],
        'no-undef': ['error'],
        'no-underscore-dangle': 'off',
        'no-unexpected-multiline': ['error'],
        'no-unreachable': ['error'],
        'no-unused-vars': ['error'],
        'no-use-before-define': 'error',
        'no-useless-call': ['error'],
        'no-whitespace-before-property': ['error'],
        'no-with': ['error'],
        'object-curly-newline': ['error', {
            consistent: true,
        }],
        'object-curly-spacing': ['error', 'always'],
        'object-shorthand': ['error', 'always'],
        'padding-line-between-statements': [
            'error',
            {
                blankLine: 'always',
                next: '*',
                prev: ['const', 'let', 'var', 'if', 'block-like', 'directive'],
            },
            {
                blankLine: 'always',
                next: ['const', 'let', 'var', 'if', 'directive', 'return', 'break', 'default', 'cjs-export', 'export'],
                prev: '*',
            },
            {
                blankLine: 'any',
                next: ['cjs-export', 'export'],
                prev: ['cjs-export', 'export'],
            },
            {
                blankLine: 'any',
                next: ['const', 'let', 'var', 'directive'],
                prev: ['const', 'let', 'var', 'directive'],
            },
            {
                blankLine: 'never',
                next: ['singleline-const', 'singleline-let', 'singleline-var'],
                prev: ['singleline-const', 'singleline-let', 'singleline-var'],
            },
            {
                blankLine: 'always',
                prev: ['*'],
                next: ['multiline-block-like'],
            },
            {
                blankLine: 'always',
                prev: ['multiline-block-like'],
                next: ['*'],
            },
            {
                blankLine: 'any',
                prev: ['case'],
                next: ['case'],
            },
            {
                blankLine: 'any',
                next: ['singleline-const', 'singleline-let', 'singleline-var'],
                prev: ['cjs-import'],
            },
        ],
        'prefer-const': ['error', {
            destructuring: 'all',
        }],
        'prefer-destructuring': ['error'],
        'quote-props': ['error', 'as-needed'],
        quotes: ['error', 'single', {
            avoidEscape: true,
        }],
        radix: ['error', 'as-needed'],
        semi: ['error'],
        'semi-spacing': ['error', {
            after: true,
            before: false,
        }],
        'space-before-blocks': ['error'],
        'space-before-function-paren': ['error', {
            anonymous: 'always',
            named: 'always',
        }],
        'space-in-parens': ['error', 'never'],
        'space-infix-ops': ['error'],
        'spaced-comment': ['error'],
        strict: ['error'],
        'use-isnan': ['error'],
        'valid-typeof': ['error'],
        'no-void': 'off',
        'eol-last': ['error', 'always'],
        'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 0 }],
        'padded-blocks': ['error', 'never'],
    },
};
